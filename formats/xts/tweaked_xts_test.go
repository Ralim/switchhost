// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//Modified to handle Nintendo's flipped endianness

package xts

import (
	"bytes"
	"crypto/aes"
	"encoding/hex"
	"testing"
)

// These test vectors have been taken from IEEE P1619/D16, Annex B.
var xtsTestVectors = []struct {
	key        string
	sector     uint64
	plaintext  string
	ciphertext string
}{
	{
		"0000000000000000000000000000000000000000000000000000000000000000",
		0,
		"0000000000000000000000000000000000000000000000000000000000000000",
		"917cf69ebd68b2ec9b9fe9a3eadda692cd43d2f59598ed858c02c2652fbf922e",
	}, {
		"1111111111111111111111111111111122222222222222222222222222222222",
		0x3333333333,
		"4444444444444444444444444444444444444444444444444444444444444444",
		"44bec82ffb76aefdfbc96dfe61e192ccfa2213677c8f4fd6e4f18f7ebb69382f",
	}, {
		"fffefdfcfbfaf9f8f7f6f5f4f3f2f1f022222222222222222222222222222222",
		0x3333333333,
		"4444444444444444444444444444444444444444444444444444444444444444",
		"524d5aaf605b785a9830f6e5b85075c26a1a856912f81b546a8f8a339ee6187a",
	}, {
		"2718281828459045235360287471352631415926535897932384626433832795",
		0,
		"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff",
		"27a7479befa1d476489f308cd4cfa6e2a96e4bbe3208ff25287dd3819616e89cc78cf7f5e543445f8333d8fa7f56000005279fa5d8b5e4ad40e736ddb4d35412328063fd2aab53e5ea1e0a9f332500a5df9487d07a5c92cc512c8866c7e860ce93fdf166a24912b422976146ae20ce846bb7dc9ba94a767aaef20c0d61ad02655ea92dc4c4e41a8952c651d33174be51a10c421110e6d81588ede82103a252d8a750e8768defffed9122810aaeb99f9172af82b604dc4b8e51bcb08235a6f4341332e4ca60482a4ba1a03b3e65008fc5da76b70bf1690db4eae29c5f1badd03c5ccf2a55d705ddcd86d449511ceb7ec30bf12b1fa35b913f9f747a8afd1b130e94bff94effd01a91735ca1726acd0b197c4e5b03393697e126826fb6bbde8ecc1e08298516e2c9ed03ff3c1b7860f6de76d4cecd94c8119855ef5297ca67e9f3e7ff72b1e99785ca0a7e7720c5b36dc6d72cac9574c8cbbc2f801e23e56fd344b07f22154beba0f08ce8891e643ed995c94d9a69c9f1b5f499027a78572aeebd74d20cc39881c213ee770b1010e4bea718846977ae119f7a023ab58cca0ad752afe656bb3c17256a9f6e9bf19fdd5a38fc82bbe872c5539edb609ef4f79c203ebb140f2e583cb2ad15b4aa5b655016a8449277dbd477ef2c8d6c017db738b18deb4a427d1923ce3ff262735779a418f20a282df920147beabe421ee5319d0568",
	}, {
		"2718281828459045235360287471352631415926535897932384626433832795",
		1,
		"27a7479befa1d476489f308cd4cfa6e2a96e4bbe3208ff25287dd3819616e89cc78cf7f5e543445f8333d8fa7f56000005279fa5d8b5e4ad40e736ddb4d35412328063fd2aab53e5ea1e0a9f332500a5df9487d07a5c92cc512c8866c7e860ce93fdf166a24912b422976146ae20ce846bb7dc9ba94a767aaef20c0d61ad02655ea92dc4c4e41a8952c651d33174be51a10c421110e6d81588ede82103a252d8a750e8768defffed9122810aaeb99f9172af82b604dc4b8e51bcb08235a6f4341332e4ca60482a4ba1a03b3e65008fc5da76b70bf1690db4eae29c5f1badd03c5ccf2a55d705ddcd86d449511ceb7ec30bf12b1fa35b913f9f747a8afd1b130e94bff94effd01a91735ca1726acd0b197c4e5b03393697e126826fb6bbde8ecc1e08298516e2c9ed03ff3c1b7860f6de76d4cecd94c8119855ef5297ca67e9f3e7ff72b1e99785ca0a7e7720c5b36dc6d72cac9574c8cbbc2f801e23e56fd344b07f22154beba0f08ce8891e643ed995c94d9a69c9f1b5f499027a78572aeebd74d20cc39881c213ee770b1010e4bea718846977ae119f7a023ab58cca0ad752afe656bb3c17256a9f6e9bf19fdd5a38fc82bbe872c5539edb609ef4f79c203ebb140f2e583cb2ad15b4aa5b655016a8449277dbd477ef2c8d6c017db738b18deb4a427d1923ce3ff262735779a418f20a282df920147beabe421ee5319d0568",
		"70884abdb1dfc2f501456887e583b28dc0b18bc0590f04f2a37177d66a0204fc9269104239b105c22f17a52a0ffcb96688c2d92ddec72d0a68432a6e107fbe3c5cd0e2b23f7d2b208a140946a0e7f31fc9f0c45ed7a481b0b4921820af4ee08c8d67a4afa22444326074e70c73a4c3f35f4fdb202726c72b4fe04ccab683be42588e345f82debbb8dd0a7a1d5f853799333661aa39e26580642eb55ffbf86cca4eed32eae33a0744fef65ed3ad22185931320a3cbf9369c9d2d8c13e2f0e07873a0d23ac3d73c3a1b2ae71972e81c67b64e4ac23450073aaf317909880a2c101dc5a89ccbdcd051fc20feb5b01b47f4fb6ed81c614a206b941670e7c02c6d6c712595c62208753061fcdaff38918126595368e33f2a9595ed16191a4f9984fad04e8c5c31a601a89892c8383d97fac81558e7aba929c8b8a0bcbeb42598270ece1b7869dbf79c6f4e6c04242e6887f677ac2516ab083db9abfe0fe583791d352503c0d72d81b679bde9d7d85ac471cc19276ba7d99ecb8dc92c6d516a19b6e58861dc3f643a53dea434027e92ac47263b13ae18801f9a983499d01f6f80d711d9e9bd7b7a424cc591de6ef592eb1577fef1efaca5be2b7ae5004d7a107e03cf6c88c26ed5641891242615821c3caf4fb6956cb716006ff50f24cb53444f80f045e14ae88619628c652b739d57a72056ca0c49360a9b0baf1b0ab3a364a571add",
	}, {
		"27182818284590452353602874713526624977572470936999595749669676273141592653589793238462643383279502884197169399375105820974944592",
		0xff,
		"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff",
		"8552f789dcd1fb8d490ffbfa1357aec3528f17f5fcfca99677aa5059e02d128a215300a338aa536a0280270f6b4011c4af33ecb51501c313beb45983dd138abfa459f4fa91623157dce5d6186b165028c9852b49cba6ddd455a5d240e14b45eb88d175956a7d3e95c7243b8c999327a9d85a04c84f6e25bad2b3915e0522415177ffff51bf43f7e69185f3726b67988689c09bfd8f0a075a15c64d9f9aee86499952c858e41ca47d1115d018c6a2083a78c9f4b3c280771fd12b7b090995dd42fb40a02f7e4aa18be0ac29c0ff0439aef862a5a06e26f25b7fa050c79791c9c9c0c03e3dcd7e10fdc32eefec1deef80dfc234c6f474a16c121627321311064c74c96ddab619effdb605c69c5c2b4347455acf47e6278a4d871659f89c7676695bdee293cd5cb1f7cbfb5583cc71dd8c092db77e414b4ad6463da2881f4ef34162a64a6ab45b5704b074eb8e51e3ef4907d2fe3e9ceafbe4af92350f9c31363647f6c8496a73369ff2c1989e4952a1221b75585cf562cb5fdf175ec6b8117e0fd453f96c5671b891f378617efb60bb34c122ae542f59a5de9cbfcf55d30bd717a1d363da82071f63da1d66f7f2d86235d6b14665a96a47f1ec8c2c38de32870fe689c22d3957ede8bb20018b836ac9b6a53d2b22cd8b5aeb680b723ea0fae511dc29181eeec35bc59547ea147277210ef537ad80633bf5bc4b6b29f070e5af8ae",
	},
}

func fromHex(s string) []byte {
	ret, err := hex.DecodeString(s)
	if err != nil {
		panic("xts: invalid hex in test")
	}
	return ret
}

func TestXTS(t *testing.T) {
	t.Parallel()
	for i, test := range xtsTestVectors {
		c, err := NewCipher(aes.NewCipher, fromHex(test.key))
		if err != nil {
			t.Errorf("#%d: failed to create cipher: %s", i, err)
			continue
		}
		plaintext := fromHex(test.plaintext)
		ciphertext := make([]byte, len(plaintext))
		c.Encrypt(ciphertext, plaintext, test.sector)

		expectedCiphertext := fromHex(test.ciphertext)
		if !bytes.Equal(ciphertext, expectedCiphertext) {
			t.Errorf("#%d: encrypted failed, got: %x, want: %x", i, ciphertext, expectedCiphertext)
			continue
		}

		decrypted := make([]byte, len(ciphertext))
		c.Decrypt(decrypted, ciphertext, test.sector)
		if !bytes.Equal(decrypted, plaintext) {
			t.Errorf("#%d: decryption failed, got: %x, want: %x", i, decrypted, plaintext)
		}
	}
}

func TestShorterCiphertext(t *testing.T) {
	t.Parallel()
	// Decrypt used to panic if the input was shorter than the output. See
	// https://go-review.googlesource.com/c/39954/
	c, err := NewCipher(aes.NewCipher, make([]byte, 32))
	if err != nil {
		t.Fatalf("NewCipher failed: %s", err)
	}

	plaintext := make([]byte, 32)
	encrypted := make([]byte, 48)
	decrypted := make([]byte, 48)

	c.Encrypt(encrypted, plaintext, 0)
	c.Decrypt(decrypted, encrypted[:len(plaintext)], 0)

	if !bytes.Equal(plaintext, decrypted[:len(plaintext)]) {
		t.Errorf("En/Decryption is not inverse")
	}
}

func BenchmarkXTS(b *testing.B) {
	b.ReportAllocs()
	c, err := NewCipher(aes.NewCipher, make([]byte, 32))
	if err != nil {
		b.Fatalf("NewCipher failed: %s", err)
	}
	plaintext := make([]byte, 32)
	encrypted := make([]byte, 48)
	decrypted := make([]byte, 48)

	for i := 0; i < b.N; i++ {
		c.Encrypt(encrypted, plaintext, 0)
		c.Decrypt(decrypted, encrypted[:len(plaintext)], 0)
	}
}
