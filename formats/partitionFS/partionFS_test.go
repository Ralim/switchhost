package partitionfs

import (
	"bytes"
	"testing"
)

func TestParsePFS0KnownGood(t *testing.T) {
	ExampleFileHeader := []uint8{
		// Offset 0x00000000 to 0x00000527
		0x50, 0x46, 0x53, 0x30, 0x08, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xF0, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xF0, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xC0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xB0, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xD9, 0x13, 0xF6, 0x83, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x89, 0x9B, 0xF6, 0x83, 0x00, 0x00, 0x00, 0x00,
		0x00, 0xB0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x89, 0x4B, 0xF8, 0x83, 0x00, 0x00, 0x00, 0x00,
		0x00, 0xC0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x89, 0x0B, 0xFA, 0x83, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBA, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x89, 0x19, 0xFA, 0x83, 0x00, 0x00, 0x00, 0x00,
		0x6F, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xF8, 0x1F, 0xFA, 0x83, 0x00, 0x00, 0x00, 0x00,
		0x00, 0xC8, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78,
		0x2E, 0x63, 0x65, 0x72, 0x74, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x2E, 0x74, 0x69, 0x6B, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x2E, 0x6E, 0x63, 0x7A, 0x00, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x2E, 0x6E, 0x63, 0x61, 0x00, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x6E, 0x63, 0x61, 0x00, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x63, 0x6E, 0x6D, 0x74, 0x2E,
		0x6E, 0x63, 0x61, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x2E, 0x63, 0x6E, 0x6D, 0x74, 0x2E, 0x78, 0x6D, 0x6C, 0x00, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x6E, 0x63, 0x61, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// Some junk to make sure its ignored
		0xFF, 0xFF,
	}

	header, err := ReadSection(bytes.NewReader(ExampleFileHeader[:]), 0)

	if err != nil {
		t.Errorf("Should parse example header details without error %v", err)
	}
	if len(header.FileEntryTable) != 8 {
		t.Errorf("got %d entries, expected 8", len(header.FileEntryTable))
	}
	// Check one partway through
	if header.FileEntryTable[6].Name != "00000000000000000000000000000000.cnmt.xml" {
		t.Errorf("got >%s< as xml name, wanted ><00000000000000000000000000000000.cnmt.xml", header.FileEntryTable[6].Name)
	}

	if header.HeaderLen != 528 {
		t.Errorf("got header length of %d, wanted 528", header.HeaderLen)
	}
}

func TestParsePFS0FailurePaths(t *testing.T) {
	ExampleFileHeader := []uint8{
		// Offset 0x00000000 to 0x00000527
		0x50, 0x46, 0x53, 0x30, 0x08, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
	}

	_, err := ReadSection(bytes.NewReader(ExampleFileHeader[:]), 4096)
	if err == nil {
		t.Error("should fail out of bounds")
	}
	ExampleFileHeader = []uint8{
		// Offset 0x00000000 to 0x00000527
		0x50, 0x45, 0x53, 0x30, 0x08, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
	}

	_, err = ReadSection(bytes.NewReader(ExampleFileHeader[:]), 0)
	if err == nil {
		t.Error("should fail out of bounds")
	}

}
